"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta ### UPDATED: Import timedelta for JWT settings
from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# It's recommended to load this from an environment variable using python-decouple
SECRET_KEY = config("SECRET_KEY", default="insecure-change-me")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="localhost,127.0.0.1", cast=Csv())
ENV = config("ENV", default="dev")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # --- Third-Party Apps ---
    'rest_framework',
    'rest_framework_simplejwt', ### UPDATED: Add simplejwt for token authentication
    'corsheaders',
    'guardian',
    'safedelete',
    'django_filters',
    'django_celery_beat',

    # --- Your Local Apps ---
    'users',
    'submissions',
    'comments',
    'messaging',

    'core'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("POSTGRES_DB", default="file_forum"),
        "USER": config("POSTGRES_USER", default="file_forum_user"),
        "PASSWORD": config("POSTGRES_PASSWORD", default="file_forum_pass"),
        "HOST": config("POSTGRES_HOST", default="localhost"),
        "PORT": config("POSTGRES_PORT", default=5432, cast=int),
        "CONN_MAX_AGE": 60,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]


# Media files (User-uploaded content)
MEDIA_URL = config("MEDIA_URL", default="/media/")
MEDIA_ROOT = config("MEDIA_ROOT", default=str(BASE_DIR / "media"))


# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# --- Custom Project Settings ---

# Custom User Model
AUTH_USER_MODEL = 'users.User'


# Django Guardian Settings
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
)

# CORS (Cross-Origin Resource Sharing) Settings
CORS_ALLOW_ALL_ORIGINS = True


# Django REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    ### UPDATED: Set JWT as the default authentication scheme for the API.
    # SessionAuthentication is kept to allow logging into the browsable API.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

### UPDATED: Add settings for Simple JWT
# This block configures the behavior of the JSON Web Tokens.
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

# --- Project environment-driven settings ---
# Short link / slug settings
DEFAULT_SLUG_LENGTH = config("DEFAULT_SLUG_LENGTH", default=8, cast=int)
RESERVED_SLUGS = set(config("RESERVED_SLUGS", default="s,admin,api,users,submissions,comments,messages,static,media,login,logout,register,profile,docs,help,terms,privacy", cast=Csv()))

# Rate Limits (cooldowns)
SUBMISSION_CREATE_COOLDOWN_SECONDS = config("SUBMISSION_CREATE_COOLDOWN_SECONDS", default=32, cast=int)
SUBMISSION_EDIT_COOLDOWN_SECONDS = config("SUBMISSION_EDIT_COOLDOWN_SECONDS", default=16, cast=int)
COMMENT_COOLDOWN_SECONDS = config("COMMENT_COOLDOWN_SECONDS", default=8, cast=int)
MESSAGE_COOLDOWN_SECONDS = config("MESSAGE_COOLDOWN_SECONDS", default=2, cast=int)

# Markdown sanitization
MARKDOWN_ALLOWED_TAGS = set(config("MARKDOWN_ALLOWED_TAGS", default="p,a,ul,ol,li,em,strong,code,pre,blockquote,hr,br,h1,h2,h3,h4,h5,h6", cast=Csv()))
MARKDOWN_ALLOWED_ATTRS = {
    "a": set(config("MARKDOWN_ALLOWED_ATTRS", default="a:href,a:title", cast=Csv()))
}

# Celery/Redis
CELERY_BROKER_URL = config("REDIS_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = config("REDIS_URL", default="redis://localhost:6379/0")
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TIMEZONE = "UTC"

from celery.schedules import crontab
CELERY_BEAT_SCHEDULE = {
    "weekly_soft_delete_cleanup": {
        "task": "core.tasks.cleanup_soft_deleted",
        "schedule": crontab(minute=0, hour=0, day_of_week="sun"),
    },
    "weekly_recalc_trending": {
        "task": "submissions.tasks.recalculate_trending",
        "schedule": crontab(minute=5, hour=0, day_of_week="sun"),
    },
}
